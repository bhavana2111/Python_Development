import gradio as gr
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import ollama
import os

# Strictly set the directory for saving visualizations
temp_dir = r'C:\Users\bmittipa\Documents\Vodafone\PrakashSenapati\Workshop\1March_EDA\EDA_INTEGRATION_LLM-main\EDA_INTEGRATION_LLM-main\Visualizations_Output'

# Ensure the directory exists
os.makedirs(temp_dir, exist_ok=True)

def eda_analysis(file_path):
    dataFrame = pd.read_csv(file_path)

    # Handle missing values
    for col in dataFrame.select_dtypes(include=['number']).columns:
        dataFrame[col] = dataFrame[col].fillna(dataFrame[col].median())

    for col in dataFrame.select_dtypes(include=['object']).columns:
        dataFrame[col] = dataFrame[col].fillna(dataFrame[col].mode()[0])

    summary = dataFrame.describe(include='all').to_string()
    missing_values = dataFrame.isnull().sum().to_string()
    
    # Generate insights using LLM
    insights = generateInsights(dataFrame)

    # Generate visualizations
    visualizations = generate_visualizations(dataFrame)

    return f"\n\n Data Loaded Successfully. \n\nSummary:\n{summary}\n\nMissing Values:\n{missing_values}\n\nInsights:\n{insights}", visualizations


def generateInsights(dataFrame):
    prompt = f'Generate Summary of Dataset and provide me the insights.\n\n{dataFrame.head(10).to_string()}'
    
    try:
        response = ollama.chat(model='mistral', messages=[{'role': 'user', 'content': prompt}])
        return response['message']['content']
    except Exception as e:
        return f"Error generating insights: {str(e)}"


def generate_visualizations(dataFrame):
    plot_paths = []

    for col in dataFrame.select_dtypes(include=['number']).columns:
        plt.figure(figsize=(6, 4))
        sns.histplot(data=dataFrame[col], bins=10, kde=True, color='blue')
        plt.title(f'Distribution Plot for {col}')
        
        path = os.path.join(temp_dir, f"{col}_distribution.png")
        plt.savefig(path)
        plot_paths.append(path)
        plt.close()

    # Correlation heatmap
    numeric_frames = dataFrame.select_dtypes(include=['number'])
    if not numeric_frames.empty:
        plt.figure(figsize=(8, 6))
        sns.heatmap(data=numeric_frames.corr(), annot=True, cmap='coolwarm', fmt='.2f', linewidths=.5)
        plt.title('Correlation Heatmap')

        path = os.path.join(temp_dir, "correlation_heatmap.png")
        plt.savefig(path)
        plot_paths.append(path)
        plt.close()

    return plot_paths


gradio_ui = gr.Interface(
    fn=eda_analysis,
    inputs=gr.File(type='filepath'),
    outputs=[gr.Textbox(label='EDA Report'), gr.Gallery(label='Data Visualizations')],
    title='OLLAMA-POWERED EDA ANALYSIS APPLICATION',
    description='Upload your dataset and view the visualizations generated by the app.'
)

gradio_ui.launch()
